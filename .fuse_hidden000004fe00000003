/// <reference path="jquery.d.ts"/>
interface Drawable {
	context:any;
	render:() => void;
}

var DEFAULT_LENGTH:number = 5;
var DIRECTIONS:any = {
	"UP":1,
	"DOWN":2,
	"LEFT":3,
	"RIGHT":4
}

class Snake implements Drawable {
	length:number=DEFAULT_LENGTH;
	x:number;
	y:number;
	direction:number=DIRECTIONS.RIGHT;
	constructor(public context:any, public isAI:boolean){
		if (!this.isAI) {
			this.x = 0;
			this.y = 0;
		}
	}
	render() {
		this.move();
		for (var i=0;i<=this.length;i++) {
			this.context.fillStyle = "white";
			this.context.fillRect(this.x+(i*7), this.y, 5, 5);
		}
	}
	move() {
		if (this.direction == DIRECTIONS.UP) {
			this.y -= 1;
		}
		else if (this.direction == DIRECTIONS.DOWN) {
			this.y += 1;
		}
		else if (this.direction == DIRECTIONS.LEFT) {
			this.x -= 1;
		}
		else {
			this.x += 1;
		}

	}
}

class SnakeGame {
	canvas:HTMLElement;
	context:any;
	constructor() {
		this.canvas = $("canvas")[0];
		this.context = this.canvas.getContext("2d");
		var human:Snake = new Snake(this.context, false);

		this.render();
	}
	render() {
		this.canvas.width = window.innerWidth;
		this.canvas.height = window.innerHeight;

		this.context.clearRect(0, 0, window.innerWidth, window.innerHeight);
		this.context.fillStyle = "black";
		this.context.fillRect(0, 0, window.innerWidth, window.innerHeight);

		human.render();
		window.requestAnimationFrame(this.render.bind(this))
	}
}

$(document).ready(function() {
	var game = new SnakeGame();
})